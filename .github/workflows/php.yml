name: GitHub PHPUnit Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    services:
      mysql-server:
        image: mysql:9.1
        env:
          # MYSQL_ALLOW_EMPTY_PASSWORD: false
          MYSQL_ROOT_PASSWORD: db_password
          MYSQL_DATABASE: db_name_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # https://github.com/actions/checkout (official)
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP with composer v2 & XDebug
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          tools: phpunit-bridge
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, mysql
          coverage: xdebug

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        id: composer-install
        # if: steps.composer-cache.outputs.cache-hit != 'true'
        run: composer install --prefer-dist --no-progress --optimize-autoloader
          # composer install --dev --no-autoloader --prefer-dist --no-progress symfony/phpunit-bridge

      # - name: Xdebug Action
      #   uses: MilesChou/docker-xdebug@master

      # Symfony
      # - name: Check the Symfony console
      #   run: |
      #     php bin/console -V
      #     php bin/console about

      - name: Install PHPUnit
        run: simple-phpunit install

      - name: Run test suite
        id: phpunit
        env:
          #  JWT_SECRET: "${{ secrets.JWT_SECRET }}"
          XDEBUG_MODE: "coverage"
        run: |
          echo "${{ secrets.PUBLICA }}" >| ./config/secrets/jwt/public.pem;
          echo "${{ secrets.PRIVADA }}" >| ./config/secrets/jwt/private.pem;
          simple-phpunit --coverage-text

      # https://github.com/phpstan/phpstan
      # - name: Analyse PHP Code (PHPStan)
      #   run: vendor/bin/phpstan analyse
