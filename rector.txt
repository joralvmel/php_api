
4 files with changes
====================

1) src/Entity/User.php:11

    ---------- begin diff ----------
@@ @@
 use Symfony\Component\Security\Core\User\UserInterface;

 /**
- * @ORM\Entity
  *
  * @Serializer\XmlNamespace(uri="http://www.w3.org/2005/Atom", prefix="atom")
  * @Serializer\AccessorOrder(
@@ @@
  *     href="expr(constant('\\App\\Controller\\ApiUsersController::RUTA_API') ~ '/' ~ object.getId())"
  * )
  */
+#[ORM\Entity]
 class User implements UserInterface, PasswordAuthenticatedUserInterface, JsonSerializable, JWTUserInterface
 {
     public final const USER_ATTR = 'user';
@@ @@
     public final const EMAIL_ATTR = 'email';
     public final const PASSWD_ATTR = 'password';
     public final const ROLES_ATTR = 'roles';
-
     /**
-     * @ORM\Id()
-     * @ORM\GeneratedValue()
-     * @ORM\Column(type="integer")
      *
      * @Serializer\XmlAttribute
      */
+    #[ORM\Id]
+    #[ORM\GeneratedValue]
+    #[ORM\Column(type: 'integer')]
     private ?int $id = 0;
-
     /**
-     * @ORM\Column(type="string", length=180, unique=true)
      *
      * @Serializer\SerializedName(User::EMAIL_ATTR)
      * @Serializer\XmlElement(cdata=false)
      */
+    #[ORM\Column(type: 'string', length: 180, unique: true)]
     private string $email;
-
     /**
-     * @ORM\Column(type="json")
      *
      * @Serializer\SerializedName(User::ROLES_ATTR)
      * @Serializer\Accessor(getter="getRoles")
@@ @@
      *
      * @var array<string> $roles
      */
+    #[ORM\Column(type: 'json')]
     private array $roles = [];
-
     /**
      * @var string The hashed password
-     * @ORM\Column(type="string")
      *
      * @Serializer\Exclude()
      */
+    #[ORM\Column(type: 'string')]
     private string $password;
-
     /**
      * User constructor.
      * @param string $email
@@ @@
         $this->roles = $roles;
         $this->setPassword($password);
     }
-
     public function getId(): ?int
     {
         return $this->id;
     }
-
     public function getEmail(): string
     {
         return $this->email;
     }
-
     public function setEmail(string $email): self
     {
         $this->email = $email;
@@ @@

         return $this;
     }
-
     /**
      * The public representation of the user (e.g. a username, an email address, etc.)
      *
@@ @@
     {
         return $this->getEmail();
     }
-
     /**
      * @deprecated since Symfony 5.3
      *
@@ @@
     {
         return $this->getEmail();
     }
-
     /**
      * @see UserInterface
      */
@@ @@

         return array_unique($roles);
     }
-
     /**
      * @param array<string> $roles
      * @return $this
@@ @@

         return $this;
     }
-
     /**
      * This method can be removed in Symfony 6.0
      *
@@ @@
     {
         return $this->password;
     }
-
     public function setPassword(string $password): self
     {
         $this->password = $password;
@@ @@

         return $this;
     }
-
     /**
      * This method can be removed in Symfony 6.0
      *
@@ @@
     {
         return null;
     }
-
     /**
      * @see UserInterface
      */
@@ @@
         // If you store any temporary, sensitive data on the user, clear it here
         $this->password = '';
     }
-
     /**
      * @inheritDoc
      *
@@ @@
             self::ROLES_ATTR => $this->getRoles(),
         ];
     }
-
     /**
      * @inheritDoc
      *
    ----------- end diff -----------

Applied rules:
 * AnnotationToAttributeRector (https://wiki.php.net/rfc/attributes_v2)


2) src/Controller/SecurityController.php:56

    ---------- begin diff ----------
@@ @@
     }

     /**
-     * @Route(
-     *     path=SecurityController::PATH_LOGIN_CHECK,
-     *     name="app_security_logincheck",
-     *     methods={ Request::METHOD_POST }
-     * )
      * @param Request $request
      * @return JWTAuthenticationSuccessResponse|Response
      */
-    public function logincheckAction(Request $request): JWTAuthenticationSuccessResponse|Response
+    #[Route(path: SecurityController::PATH_LOGIN_CHECK, name: 'app_security_logincheck', methods: [Request::METHOD_POST])]
+    public function logincheckAction(Request $request) : JWTAuthenticationSuccessResponse|Response
     {
         // Obtenci├│n datos: Form | JSON | URLencoded
         $email = '';
@@ @@
                 }
             }
         }
-
         $user = (null !== $email)
             ? $this->entityManager
                 ->getRepository(User::class)
                 ->findOneBy([ self::USER_ATTR_EMAIL => $email ])
             : null;
-
         if (!$user instanceof User || !$this->passwordHasher->isPasswordValid($user, strval($password))) {
             return $this->failureHandler->onAuthenticationFailure(
                 $request,
@@ @@
                 new BadCredentialsException()
             );
         }
-
         /** @var JsonResponse $response */
         $response = $this->successHandler->handleAuthenticationSuccess($user);
         $jwt = json_decode((string) $response->getContent(), null, 512, JSON_THROW_ON_ERROR)->token;
    ----------- end diff -----------

Applied rules:
 * AnnotationToAttributeRector (https://wiki.php.net/rfc/attributes_v2)


3) src/Controller/DefaultController.php:22

    ---------- begin diff ----------
@@ @@
     /**
      * Redirect home page
      *
-     * @Route(
-     *     path="/",
-     *     name="homepage",
-     *     methods={ Request::METHOD_GET }
-     * )
      */
-    public function homeRedirect(): Response
+    #[Route(path: '/', name: 'homepage', methods: [Request::METHOD_GET])]
+    public function homeRedirect() : Response
     {
         return new RedirectResponse(
             '/api-docs/index.html',
    ----------- end diff -----------

Applied rules:
 * AnnotationToAttributeRector (https://wiki.php.net/rfc/attributes_v2)


4) src/Controller/ApiUsersController.php:19

    ---------- begin diff ----------
@@ @@
  *
  * @package App\Controller
  *
- * @Route(
- *     path=ApiUsersController::RUTA_API,
- *     name="api_users_"
- * )
  */
+#[Route(path: ApiUsersController::RUTA_API, name: 'api_users_')]
 class ApiUsersController extends AbstractController
 {
-
     public final const RUTA_API = '/api/v1/users';
-
     private const HEADER_CACHE_CONTROL = 'Cache-Control';
     private const HEADER_ETAG = 'ETag';
     private const HEADER_ALLOW = 'Allow';
     private const ROLE_ADMIN = 'ROLE_ADMIN';
-
     private EntityManagerInterface $entityManager;
     private UserPasswordHasherInterface $passwordHasher;
-
     public function __construct(EntityManagerInterface $em, UserPasswordHasherInterface $passwordHasher)
     {
         $this->entityManager = $em;
         $this->passwordHasher = $passwordHasher;
     }
-
     /**
      * CGET Action
      * Summary: Retrieves the collection of User resources.
      * Notes: Returns all users from the system that the user has access to.
      *
-     * @Route(
-     *     path=".{_format}/{sort?id}",
-     *     defaults={ "_format": "json", "sort": "id" },
-     *     requirements={
-     *         "sort": "id|email|roles",
-     *         "_format": "json|xml"
-     *     },
-     *     methods={ Request::METHOD_GET },
-     *     name="cget"
-     * )
      *
-     * @Security(
-     *     expression="is_granted('IS_AUTHENTICATED_FULLY')",
-     *     statusCode=401,
-     *     message="`Unauthorized`: Invalid credentials."
-     * )
      */
-    public function cgetAction(Request $request): Response
+    #[Route(path: '.{_format}/{sort?id}', defaults: ['_format' => 'json', 'sort' => 'id'], requirements: ['sort' => 'id|email|roles', '_format' => 'json|xml'], methods: [Request::METHOD_GET], name: 'cget')]
+    #[Security(expression: "is_granted('IS_AUTHENTICATED_FULLY')", statusCode: 401, message: '`Unauthorized`: Invalid credentials.')]
+    public function cgetAction(Request $request) : Response
     {
         $order = $request->get('sort');
         $users = $this->entityManager
@@ @@
             ->getRepository(User::class)
             ->findBy([], [ $order => 'ASC' ]);
         $format = Utils::getFormat($request);
-
         // No hay usuarios?
         // @codeCoverageIgnoreStart
         if (empty($users)) {
@@ @@
             return $this->errorMessage(Response::HTTP_NOT_FOUND, null, $format);    // 404
         }
         // @codeCoverageIgnoreEnd
-
         // Caching with ETag
         $etag = md5((string) json_encode($users, JSON_THROW_ON_ERROR));
         if (($etags = $request->getETags()) && (in_array($etag, $etags) || in_array('*', $etags))) {
             return new Response(null, Response::HTTP_NOT_MODIFIED); // 304
         }
-
         return Utils::apiResponse(
             Response::HTTP_OK,
             [ 'users' => array_map(fn ($u) =>  ['user' => $u], $users) ],
@@ @@
             ]
         );
     }
-
     /**
      * GET Action
      * Summary: Retrieves a User resource based on a single ID.
@@ @@
      * Notes: Returns the user identified by &#x60;userId&#x60;.
      *
      * @param  int $userId User id
-     * @Route(
-     *     path="/{userId}.{_format}",
-     *     defaults={ "_format": null },
-     *     requirements={
-     *          "userId": "\d+",
-     *          "_format": "json|xml"
-     *     },
-     *     methods={ Request::METHOD_GET },
-     *     name="get"
-     * )
      *
-     * @Security(
-     *     expression="is_granted('IS_AUTHENTICATED_FULLY')",
-     *     statusCode=401,
-     *     message="`Unauthorized`: Invalid credentials."
-     * )
      */
-    public function getAction(Request $request, int $userId): Response
+    #[Route(path: '/{userId}.{_format}', defaults: ['_format' => null], requirements: ['userId' => '\d+', '_format' => 'json|xml'], methods: [Request::METHOD_GET], name: 'get')]
+    #[Security(expression: "is_granted('IS_AUTHENTICATED_FULLY')", statusCode: 401, message: '`Unauthorized`: Invalid credentials.')]
+    public function getAction(Request $request, int $userId) : Response
     {
         /** @var User $user */
         $user = $this->entityManager
@@ @@
             ->getRepository(User::class)
             ->find($userId);
         $format = Utils::getFormat($request);
-
         if (null == $user) {
             return $this->errorMessage(Response::HTTP_NOT_FOUND, null, $format);    // 404
         }
-
         // Caching with ETag
         $etag = md5((string) json_encode($user, JSON_THROW_ON_ERROR));
         if (($etags = $request->getETags()) && (in_array($etag, $etags) || in_array('*', $etags))) {
                 return new Response(null, Response::HTTP_NOT_MODIFIED); // 304
         }
-
         return Utils::apiResponse(
             Response::HTTP_OK,
             [ User::USER_ATTR => $user ],
@@ @@
             ]
         );
     }
-
     /**
      * Summary: Provides the list of HTTP supported methods
      * Notes: Return a &#x60;Allow&#x60; header with a list of HTTP supported methods.
      *
      * @param  int $userId User id
-     * @Route(
-     *     path="/{userId}.{_format}",
-     *     defaults={ "userId" = 0, "_format": "json" },
-     *     requirements={
-     *          "userId": "\d+",
-     *         "_format": "json|xml"
-     *     },
-     *     methods={ Request::METHOD_OPTIONS },
-     *     name="options"
-     * )
      */
-    public function optionsAction(int $userId): Response
+    #[Route(path: '/{userId}.{_format}', defaults: ['userId' => 0, '_format' => 'json'], requirements: ['userId' => '\d+', '_format' => 'json|xml'], methods: [Request::METHOD_OPTIONS], name: 'options')]
+    public function optionsAction(int $userId) : Response
     {
         $methods = $userId !== 0
             ? [ Request::METHOD_GET, Request::METHOD_PUT, Request::METHOD_DELETE ]
             : [ Request::METHOD_GET, Request::METHOD_POST ];
         $methods[] = Request::METHOD_OPTIONS;
-
         return new Response(
             null,
             Response::HTTP_NO_CONTENT,
@@ @@
             ]
         );
     }
-
     /**
      * DELETE Action
      * Summary: Removes the User resource.
@@ @@
      * Notes: Deletes the user identified by &#x60;userId&#x60;.
      *
      * @param   int $userId User id
-     * @Route(
-     *     path="/{userId}.{_format}",
-     *     defaults={ "_format": null },
-     *     requirements={
-     *          "userId": "\d+",
-     *         "_format": "json|xml"
-     *     },
-     *     methods={ Request::METHOD_DELETE },
-     *     name="delete"
-     * )
      *
-     * @Security(
-     *     expression="is_granted('IS_AUTHENTICATED_FULLY')",
-     *     statusCode=401,
-     *     message="`Unauthorized`: Invalid credentials."
-     * )
      */
-    public function deleteAction(Request $request, int $userId): Response
+    #[Route(path: '/{userId}.{_format}', defaults: ['_format' => null], requirements: ['userId' => '\d+', '_format' => 'json|xml'], methods: [Request::METHOD_DELETE], name: 'delete')]
+    #[Security(expression: "is_granted('IS_AUTHENTICATED_FULLY')", statusCode: 401, message: '`Unauthorized`: Invalid credentials.')]
+    public function deleteAction(Request $request, int $userId) : Response
     {
         $format = Utils::getFormat($request);
         // Puede borrar un usuario s├│lo si tiene ROLE_ADMIN
@@ @@
                 $format
             );
         }
-
         /** @var User $user */
         $user = $this->entityManager
             ->getRepository(User::class)
             ->find($userId);
-
         if (null == $user) {   // 404 - Not Found
             return $this->errorMessage(Response::HTTP_NOT_FOUND, null, $format);
         }
-
         $this->entityManager->remove($user);
         $this->entityManager->flush();
-
         return Utils::apiResponse(Response::HTTP_NO_CONTENT);
     }
-
     /**
      * POST action
      * Summary: Creates a User resource.
      *
      * @param Request $request request
-     * @Route(
-     *     path=".{_format}",
-     *     defaults={ "_format": null },
-     *     requirements={
-     *         "_format": "json|xml"
-     *     },
-     *     methods={ Request::METHOD_POST },
-     *     name="post"
-     * )
      *
-     * @Security(
-     *     expression="is_granted('IS_AUTHENTICATED_FULLY')",
-     *     statusCode=401,
-     *     message="`Unauthorized`: Invalid credentials."
-     * )
      */
-    public function postAction(Request $request): Response
+    #[Route(path: '.{_format}', defaults: ['_format' => null], requirements: ['_format' => 'json|xml'], methods: [Request::METHOD_POST], name: 'post')]
+    #[Security(expression: "is_granted('IS_AUTHENTICATED_FULLY')", statusCode: 401, message: '`Unauthorized`: Invalid credentials.')]
+    public function postAction(Request $request) : Response
     {
         $format = Utils::getFormat($request);
         // Puede crear un usuario s├│lo si tiene ROLE_ADMIN
@@ @@
         }
         $body = $request->getContent();
         $postData = json_decode((string) $body, true, 512, JSON_THROW_ON_ERROR);
-
         if (!isset($postData[User::EMAIL_ATTR], $postData[User::PASSWD_ATTR])) {
             // 422 - Unprocessable Entity -> Faltan datos
             return $this->errorMessage(Response::HTTP_UNPROCESSABLE_ENTITY, null, $format);
         }
-
         // hay datos -> procesarlos
         $user_exist = $this->entityManager
                 ->getRepository(User::class)
                 ->findOneBy([ User::EMAIL_ATTR => $postData[User::EMAIL_ATTR] ]);
-
         if (null !== $user_exist) {    // 400 - Bad Request
             return $this->errorMessage(Response::HTTP_BAD_REQUEST, null, $format);
         }
-
         // 201 - Created
         $user = new User(
             strval($postData[User::EMAIL_ATTR]),
@@ @@
         if (isset($postData[User::ROLES_ATTR])) {
             $user->setRoles($postData[User::ROLES_ATTR]);
         }
-
         $this->entityManager->persist($user);
         $this->entityManager->flush();
-
         return Utils::apiResponse(
             Response::HTTP_CREATED,
             [ User::USER_ATTR => $user ],
@@ @@
             ]
         );
     }
-
     /**
      * PUT action
      * Summary: Updates the User resource.
@@ @@
      *
      * @param   Request $request request
      * @param   int $userId User id
-     * @Route(
-     *     path="/{userId}.{_format}",
-     *     defaults={ "_format": null },
-     *     requirements={
-     *          "userId": "\d+",
-     *         "_format": "json|xml"
-     *     },
-     *     methods={ Request::METHOD_PUT },
-     *     name="put"
-     * )
      *
-     * @Security(
-     *     expression="is_granted('IS_AUTHENTICATED_FULLY')",
-     *     statusCode=401,
-     *     message="`Unauthorized`: Invalid credentials."
-     * )
      */
-    public function putAction(Request $request, int $userId): Response
+    #[Route(path: '/{userId}.{_format}', defaults: ['_format' => null], requirements: ['userId' => '\d+', '_format' => 'json|xml'], methods: [Request::METHOD_PUT], name: 'put')]
+    #[Security(expression: "is_granted('IS_AUTHENTICATED_FULLY')", statusCode: 401, message: '`Unauthorized`: Invalid credentials.')]
+    public function putAction(Request $request, int $userId) : Response
     {
         $format = Utils::getFormat($request);
         // Puede editar otro usuario diferente s├│lo si tiene ROLE_ADMIN
@@ @@
         }
         $body = (string) $request->getContent();
         $postData = json_decode($body, true, 512, JSON_THROW_ON_ERROR);
-
         /** @var User $user */
         $user = $this->entityManager
             ->getRepository(User::class)
             ->find($userId);
-
         if (null == $user) {    // 404 - Not Found
             return $this->errorMessage(Response::HTTP_NOT_FOUND, null, $format);
         }
-
         // Optimistic Locking (strong validation)
         $etag = md5((string) json_encode($user, JSON_THROW_ON_ERROR));
         if (!$request->headers->has('If-Match') || $etag != $request->headers->get('If-Match')) {
@@ @@
                 $format
             ); // 412
         }
-
         if (isset($postData[User::EMAIL_ATTR])) {
             $user_exist = $this->entityManager
                 ->getRepository(User::class)
@@ @@
             }
             $user->setEmail($postData[User::EMAIL_ATTR]);
         }
-
         // password
         if (isset($postData[User::PASSWD_ATTR])) {
             // hash the password (based on the security.yaml config for the $user class)
@@ @@
             );
             $user->setPassword($hashedPassword);
         }
-
         // roles
         if (isset($postData[User::ROLES_ATTR])) {
             if (
@@ @@
             }
             $user->setRoles($postData[User::ROLES_ATTR]);
         }
-
         $this->entityManager->flush();
-
         return Utils::apiResponse(
             209,                        // 209 - Content Returned
             [ User::USER_ATTR => $user ],
@@ @@
             $format
         );
     }
-
     /**
      * Error Message Response
      */
    ----------- end diff -----------

Applied rules:
 * AnnotationToAttributeRector (https://wiki.php.net/rfc/attributes_v2)


 [OK] 4 files would have changed (dry-run) by Rector                                                

